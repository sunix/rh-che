--- src/app/index.module.ts
+++ src/app/index.module.ts
@@ -33,13 +33,59 @@
 import {DemoComponentsController} from './demo-components/demo-components.controller';
 import {CheBranding} from '../components/branding/che-branding.factory';
 import {ChePreferences} from '../components/api/che-preferences.factory';
+import * as Keycloak from '../components/keycloak/keycloak';
 
+let keycloakConfig = {
+  "url": "https://sso.openshift.io/auth",
+  "realm": "fabric8",
+  "clientId": "openshiftio-public",
+};
 
 // init module
 let initModule = angular.module('userDashboard', ['ngAnimate', 'ngCookies', 'ngTouch', 'ngSanitize', 'ngResource', 'ngRoute',
   'angular-websocket', 'ui.bootstrap', 'ui.codemirror', 'ngMaterial', 'ngMessages', 'angularMoment', 'angular.filter',
   'ngDropdowns', 'ngLodash', 'angularCharts', 'ngClipboard', 'uuid4', 'angularFileUpload']);
 
+angular.element(document).ready(($injector) => {
+
+  let promise = $injector.get('../wsmaster/api/keycloak/settings');
+
+  function keycloakInit(keycloakDisabled) {
+      if (keycloakDisabled) {
+        window['_keycloak'] = false;
+        angular.bootstrap(document, ['userDashboard'], {strictDi:true}); // manually bootstrap Angular
+      } else {
+        window['_keycloak'] = Keycloak(keycloakConfig);
+        window['_keycloak']
+          .init({
+            onLoad: 'check-sso', checkLoginIframe: false, responseMode: 'query'
+          })
+          .success(() => {
+            angular.bootstrap(document, ['userDashboard'], {strictDi:true}); // manually bootstrap Angular
+          });
+      }
+    
+  }
+
+  promise.then((resp) => {
+    console.log('resp : ' + resp.toString() );
+    if (resp['che.keycloak.disabled'] == 'true') {
+      keycloakInit(true);
+    } else {
+      keycloakInit(false);
+    }
+  }, (error) => {
+    console.log(error);
+    keycloakInit(false);
+  });
+  
+  console.log('running keycloak init sequence');
+
+});
+
+initModule.factory('keycloak', $window => {
+    return $window._keycloak;
+});
 
 // add a global resolve flag on all routes (user needs to be resolved first)
 initModule.config(['$routeProvider', ($routeProvider: che.route.IRouteProvider) => {
@@ -171,6 +217,44 @@
     });
   }]);
 
+initModule.factory('KeyCloakTokenInterceptor', ($q, keycloak) => {
+  return {
+    request: (config) => {
+      console.log('keycloak token interceptor request for ' + config.url);
+      if (config.url.indexOf(keycloakConfig.url) > -1) {
+        console.log('skipped token injection for ' + config.url);
+        return config;
+      }
+      if (keycloak && keycloak.token) {
+        console.log('refreshing token : ' + config.url);
+        let deferred = $q.defer();
+        keycloak.updateToken(5).success(function () {
+          config.headers = config.headers || {};
+          angular.extend(config.headers, {'Authorization': 'Bearer ' + keycloak.token});
+          console.log('injecting token : ' + config.url);
+          deferred.resolve(config);
+        }).error(function () {
+          console.log('token refresh failed :' + config.url);
+          deferred.reject('Failed to refresh token');
+        });
+        return deferred.promise;
+      }
+      return config || $q.when(config);
+    },
+    response: (response) => {
+      console.log('RESPONSE '+response.config.url+ ' :' + JSON.stringify(response));
+      return response || $q.when(response);
+    },
+    responseError: (rejection)=>{
+        console.log('ERROR (response) : '+ JSON.stringify(rejection));
+        return $q.reject(rejection);
+    },
+    requestError: (rejection) =>{
+       console.log('ERROR (request) : '+ JSON.stringify(rejection));
+       return $q.reject(rejection);
+    }
+  }
+});
 
 // add interceptors
 initModule.factory('ETagInterceptor', ($window, $cookies, $q) => {
@@ -361,6 +445,7 @@
 });
 
 initModule.config(['$routeProvider', '$locationProvider', '$httpProvider', ($routeProvider, $locationProvider, $httpProvider) => {
+  $httpProvider.interceptors.push('KeyCloakTokenInterceptor');
   // add the ETag interceptor for Che API
   $httpProvider.interceptors.push('ETagInterceptor');
 }]);
